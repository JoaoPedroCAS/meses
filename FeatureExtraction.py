# -*- coding: utf-8 -*-
"""03_Features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rCEewOYgYoG6eWvghzxbyovZ_iYM4b2w

---

# ***03***

---

**Aprendizagem de Máquina**

Gustavo H. G. Matsushita (gustavomatsushita@ufpr.br)

Prof. Luiz Eduardo S. Oliveira (luiz.oliveira@ufpr.br)

---

**Universidade Federal do Paraná**

Departamento de Informática

http://web.inf.ufpr.br/luizoliveira

---

"""#Importando módulos no Python"""

from PIL import Image
from keras.preprocessing import image
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_v3 import preprocess_input
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input
from keras.applications.xception import Xception
from keras.applications.xception import preprocess_input
import numpy as np
import os

##DECLARAÇÕES DE CAMINHOS -------------------------------------------------------------------------
drive_path = 'C:\\Users\\jpedr\\OneDrive\\Documentos\\TCC\\Códigos\\Meu\\meses\\' ##Path até a past
##a onde os dados estão
print("Caminho até a pasta meses foi configurado")

## Arquivo de entrada
entrada = drive_path + 'data.txt' ##Cada linha desse arquivo tem: o nome do arquivo e a resposta(no
##caso, o mês que está escrito)
print("Arquivo data.txt encontrado")

arq = open(entrada,'r') ##Abre o arquivo no modo leitura
print("Arquivo data.txt aberto no modo leitura")
conteudo_entrada = arq.readlines() ##Le cada linha e salva num vetor
print("Linhas do arquivo data.txt lidas e armazenadas")
arq.close() ##Fecha o arquivo
print("Arquivo data.txt fechado")

dir_dataset = drive_path + 'data\\' ##Diretorio das imagens
print("Caminho até a pasta com os dados configurado")

## Diretorio de destino
dir_destino = drive_path + 'libsvm\\' ##Aqui ficará o arquivo com os atributos extraidos
print("Caminho até a pasta onde ficarão os atributos extraidos configurado")

if not os.path.exists(dir_destino): ##Caso a pasta não exista
  print("Pasta libsvm não existia e foi criada")
  os.makedirs(dir_destino) ##Cria a pasta

arq_svm = dir_destino + 'data_Xception.txt' ##Cria o arquivo onde ficarão os atributos
print("Caminho para o arquivo data_Xception.txt configurado")
file_svm = open(arq_svm, 'w') ##Abre o arquivo no modo leitura
print("Arquivo data_Xception aberto no modo escrita")

##-------------------------------------------------------------------------------------------------

##TRATAMENTO E PROCESSAMENTO DA IMAGEM ------------------------------------------------------------
img_rows, img_cols = 299, 299 ##As imagens irão passar por um resize e ficaram com 75x75
print("As imagens serão formatadas para o tamanho 299x299")

"""#Importando modelo pré-treinado"""

# InceptionV3
# - weights='imagenet' (inicializa pesos pre-treinado na ImageNet)
# - include_top=False (nao inclui as fully-connected layers)
# - input_shape=(299, 299, 3) (DEFAULT) (minimo=75x75)
#model = VGG19(weights='imagenet', include_top=False)
model = Xception(weights='imagenet', include_top=False)
print("Importando a arquitetura da CNN, no caso a Xception")

# Mostra a arquitetura da rede
model.summary()

"""#Processando as imagens e salvando no formato LIBSVM"""

print ("Processando as imagens")

for i in conteudo_entrada:
  
  nome, classe = i.split()

  img_path = dir_dataset + nome
  print (img_path) ##
  
  img = image.load_img(img_path, target_size=(img_rows,img_cols))
  img_data = image.img_to_array(img)
  img_data = np.expand_dims(img_data, axis=0)
  img_data = preprocess_input(img_data)

  # Passa a imagem pela rede
  inception_features = model.predict(img_data)

  # Flatten
  features_np = np.array(inception_features)
  features_np = features_np.flatten()

  # Salva no formato do libsvm
  file_svm.write(classe+' ')
  for j in range (features_np.size):
    file_svm.write(str(j+1)+':'+str(features_np[j])+' ')
  file_svm.write('\n')

print (features_np.size)
file_svm.close()
print("Caracteristicas extraidas e salvas no arquivo data_Xception.txt")

##-------------------------------------------------------------------------------------------------


